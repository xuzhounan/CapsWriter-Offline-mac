import Foundation
import os.log
import Combine
import QuartzCore
import Darwin

/// ÊÄßËÉΩÂàÜÊûêÂ∑•ÂÖ∑ÈõÜ - Ê∑±Â∫¶ÊÄßËÉΩÂàÜÊûêÂíåËØäÊñ≠
/// 
/// ÂäüËÉΩÁâπÁÇπÔºö
/// - ÂáΩÊï∞Ë∞ÉÁî®ÊÄßËÉΩÂàÜÊûê
/// - ÂÜÖÂ≠òÂàÜÈÖçËøΩË∏™
/// - Á∫øÁ®ãÊâßË°åÂàÜÊûê
/// - ÁÉ≠ÁÇπ‰ª£Á†ÅËØÜÂà´
/// - ÊÄßËÉΩÁì∂È¢àËá™Âä®ËØäÊñ≠
/// - ÊÄßËÉΩÊï∞ÊçÆÂèØËßÜÂåñÊîØÊåÅ
class ProfilerTools: ObservableObject {
    
    // MARK: - Singleton
    static let shared = ProfilerTools()
    
    // MARK: - Published Properties
    @Published var isProfilingActive = false
    @Published var currentSession: ProfilingSession?
    @Published var completedSessions: [ProfilingSession] = []
    @Published var hotspots: [PerformanceHotspot] = []
    @Published var profilingStats = ProfilingStatistics()
    
    // MARK: - Private Properties
    private let profilingQueue = DispatchQueue(label: "com.capswriter.profiling", qos: .utility)
    private let analysisQueue = DispatchQueue(label: "com.capswriter.analysis", qos: .background)
    
    // ÂáΩÊï∞Ë∞ÉÁî®ËøΩË∏™
    private var functionCallTracker = FunctionCallTracker()
    private var memoryAllocationTracker = MemoryAllocationTracker()
    private var threadExecutionTracker = ThreadExecutionTracker()
    
    // ÊÄßËÉΩÈááÊ†∑
    private var performanceSampler: Timer?
    private let samplingInterval: TimeInterval = 0.1 // 100ms ÈááÊ†∑Èó¥Èöî
    
    // Êï∞ÊçÆÂ≠òÂÇ®
    private var profilingSamples: [ProfilingSample] = []
    private var functionCallSamples: [FunctionCallSample] = []
    private var memoryAllocationSamples: [MemoryAllocationSample] = []
    
    // Êó•ÂøóÂô®
    private let logger = os.Logger(subsystem: "com.capswriter", category: "ProfilerTools")
    
    // ÁªüËÆ°Êï∞ÊçÆ
    private var totalSamplesCollected: UInt64 = 0
    private var hotspotDetectionThreshold: Double = 0.05 // 5% Êó∂Èó¥Ê∂àËÄóÈòàÂÄº
    
    // MARK: - Initialization
    private init() {
        setupSignalHandlers()
        logger.info("üî¨ ProfilerTools ÂàùÂßãÂåñÂÆåÊàê")
    }
    
    deinit {
        stopProfiling()
        logger.info("üî¨ ProfilerTools ÈîÄÊØÅ")
    }
    
    // MARK: - Public Methods
    
    /// ÂºÄÂßãÊÄßËÉΩÂàÜÊûê
    /// - Parameter sessionName: ÂàÜÊûê‰ºöËØùÂêçÁß∞
    func startProfiling(sessionName: String = "Default Session") {
        guard !isProfilingActive else {
            logger.warning("‚ö†Ô∏è ÊÄßËÉΩÂàÜÊûêÂ∑≤Âú®ËøõË°å‰∏≠")
            return
        }
        
        logger.info("üöÄ ÂºÄÂßãÊÄßËÉΩÂàÜÊûê‰ºöËØù: \(sessionName)")
        
        profilingQueue.async { [weak self] in
            self?.initializeProfilingSession(sessionName: sessionName)
        }
    }
    
    /// ÂÅúÊ≠¢ÊÄßËÉΩÂàÜÊûê
    func stopProfiling() {
        guard isProfilingActive else {
            logger.warning("‚ö†Ô∏è ÊÄßËÉΩÂàÜÊûêÊú™Âú®ËøõË°å‰∏≠")
            return
        }
        
        logger.info("üõë ÂÅúÊ≠¢ÊÄßËÉΩÂàÜÊûê")
        
        profilingQueue.async { [weak self] in
            self?.finalizeProfilingSession()
        }
    }
    
    /// ËÆ∞ÂΩïÂáΩÊï∞Ë∞ÉÁî®
    /// - Parameters:
    ///   - functionName: ÂáΩÊï∞Âêç
    ///   - className: Á±ªÂêç
    ///   - startTime: ÂºÄÂßãÊó∂Èó¥
    ///   - endTime: ÁªìÊùüÊó∂Èó¥
    func recordFunctionCall(functionName: String, className: String, startTime: Date, endTime: Date) {
        guard isProfilingActive else { return }
        
        let sample = FunctionCallSample(
            functionName: functionName,
            className: className,
            startTime: startTime,
            endTime: endTime,
            duration: endTime.timeIntervalSince(startTime),
            threadId: Thread.current.description
        )
        
        profilingQueue.async { [weak self] in
            self?.functionCallSamples.append(sample)
            self?.functionCallTracker.recordCall(sample)
        }
    }
    
    /// ËÆ∞ÂΩïÂÜÖÂ≠òÂàÜÈÖç
    /// - Parameters:
    ///   - size: ÂàÜÈÖçÂ§ßÂ∞è
    ///   - type: ÂàÜÈÖçÁ±ªÂûã
    ///   - location: ÂàÜÈÖç‰ΩçÁΩÆ
    func recordMemoryAllocation(size: Int, type: String, location: String) {
        guard isProfilingActive else { return }
        
        let sample = MemoryAllocationSample(
            size: size,
            type: type,
            location: location,
            timestamp: Date(),
            threadId: Thread.current.description
        )
        
        profilingQueue.async { [weak self] in
            self?.memoryAllocationSamples.append(sample)
            self?.memoryAllocationTracker.recordAllocation(sample)
        }
    }
    
    /// ÂàÜÊûêÊÄßËÉΩÁì∂È¢à
    /// - Returns: ÊÄßËÉΩÂàÜÊûêÊä•Âëä
    func analyzePerformanceBottlenecks() -> PerformanceAnalysisReport {
        logger.info("üîç ÂºÄÂßãÊÄßËÉΩÁì∂È¢àÂàÜÊûê")
        
        let report = PerformanceAnalysisReport()
        
        analysisQueue.sync {
            // ÂàÜÊûêÂáΩÊï∞Ë∞ÉÁî®ÁÉ≠ÁÇπ
            report.functionHotspots = analyzeFunctionHotspots()
            
            // ÂàÜÊûêÂÜÖÂ≠òÂàÜÈÖçÊ®°Âºè
            report.memoryAllocationPatterns = analyzeMemoryAllocationPatterns()
            
            // ÂàÜÊûêÁ∫øÁ®ãÊâßË°åÊÉÖÂÜµ
            report.threadExecutionAnalysis = analyzeThreadExecution()
            
            // ÁîüÊàê‰ºòÂåñÂª∫ËÆÆ
            report.optimizationRecommendations = generateOptimizationRecommendations(report)
            
            // ËÆ°ÁÆóÊÄª‰ΩìÊÄßËÉΩËØÑÂàÜ
            report.performanceScore = calculatePerformanceScore(report)
        }
        
        logger.info("‚úÖ ÊÄßËÉΩÁì∂È¢àÂàÜÊûêÂÆåÊàêÔºåËØÑÂàÜ: \(Int(report.performanceScore))")
        
        return report
    }
    
    /// ÂØºÂá∫ÊÄßËÉΩÂàÜÊûêÊï∞ÊçÆ
    /// - Parameter format: ÂØºÂá∫Ê†ºÂºè
    /// - Returns: ÂØºÂá∫ÁöÑÊï∞ÊçÆ
    func exportProfilingData(format: ProfilingDataFormat) -> Data? {
        switch format {
        case .json:
            return exportAsJSON()
        case .csv:
            return exportAsCSV()
        case .instruments:
            return exportForInstruments()
        }
    }
    
    /// Ê∏ÖÈô§ÂàÜÊûêÊï∞ÊçÆ
    func clearProfilingData() {
        profilingQueue.async { [weak self] in
            self?.profilingSamples.removeAll()
            self?.functionCallSamples.removeAll()
            self?.memoryAllocationSamples.removeAll()
            
            self?.functionCallTracker.reset()
            self?.memoryAllocationTracker.reset()
            self?.threadExecutionTracker.reset()
            
            DispatchQueue.main.async {
                self?.completedSessions.removeAll()
                self?.hotspots.removeAll()
                self?.currentSession = nil
            }
        }
        
        logger.info("üóëÔ∏è ÊÄßËÉΩÂàÜÊûêÊï∞ÊçÆÂ∑≤Ê∏ÖÈô§")
    }
    
    // MARK: - Private Methods
    
    private func setupSignalHandlers() {
        // ËÆæÁΩÆ‰ø°Âè∑Â§ÑÁêÜÂô®‰ª•ÊçïËé∑ÊÄßËÉΩÁõ∏ÂÖ≥‰∫ã‰ª∂
        signal(SIGPROF, SIG_IGN) // ÂøΩÁï•SIGPROF‰ø°Âè∑ÔºåÈÅøÂÖçÂπ≤Êâ∞
    }
    
    private func initializeProfilingSession(sessionName: String) {
        let session = ProfilingSession(
            name: sessionName,
            startTime: Date(),
            endTime: nil
        )
        
        DispatchQueue.main.async {
            self.currentSession = session
            self.isProfilingActive = true
        }
        
        // ÂºÄÂßãÊï∞ÊçÆÊî∂ÈõÜ
        startDataCollection()
        
        logger.info("‚úÖ ÊÄßËÉΩÂàÜÊûê‰ºöËØùÂ∑≤ÂàùÂßãÂåñ: \(sessionName)")
    }
    
    private func finalizeProfilingSession() {
        stopDataCollection()
        
        guard var session = currentSession else { return }
        
        session.endTime = Date()
        session.sampleCount = profilingSamples.count
        session.functionCallCount = functionCallSamples.count
        session.memoryAllocationCount = memoryAllocationSamples.count
        
        DispatchQueue.main.async {
            self.completedSessions.append(session)
            self.currentSession = nil
            self.isProfilingActive = false
        }
        
        // ÊâßË°åÂàÜÊûê
        analysisQueue.async { [weak self] in
            self?.performPostSessionAnalysis()
        }
        
        logger.info("‚úÖ ÊÄßËÉΩÂàÜÊûê‰ºöËØùÂ∑≤ÂÆåÊàê")
    }
    
    private func startDataCollection() {
        // ÈáçÁΩÆÊï∞ÊçÆÊî∂ÈõÜ
        profilingSamples.removeAll()
        functionCallSamples.removeAll()
        memoryAllocationSamples.removeAll()
        
        // ÂêØÂä®ÊÄßËÉΩÈááÊ†∑ÂÆöÊó∂Âô®
        performanceSampler = Timer.scheduledTimer(withTimeInterval: samplingInterval, repeats: true) { [weak self] _ in
            self?.collectPerformanceSample()
        }
        
        logger.debug("üîÑ Êï∞ÊçÆÊî∂ÈõÜÂ∑≤ÂºÄÂßã")
    }
    
    private func stopDataCollection() {
        performanceSampler?.invalidate()
        performanceSampler = nil
        
        logger.debug("‚èπÔ∏è Êï∞ÊçÆÊî∂ÈõÜÂ∑≤ÂÅúÊ≠¢")
    }
    
    private func collectPerformanceSample() {
        let sample = ProfilingSample(
            timestamp: Date(),
            cpuUsage: getCurrentCPUUsage(),
            memoryUsage: getCurrentMemoryUsage(),
            threadCount: getCurrentThreadCount()
        )
        
        profilingQueue.async { [weak self] in
            self?.profilingSamples.append(sample)
            self?.totalSamplesCollected += 1
        }
    }
    
    private func getCurrentCPUUsage() -> Double {
        // Ëé∑ÂèñÂΩìÂâçCPU‰ΩøÁî®Áéá
        var info = processor_info_array_t.allocate(capacity: 1)
        var numCpuInfo: mach_msg_type_number_t = 0
        var numCpus: natural_t = 0
        
        let result = host_processor_info(mach_host_self(),
                                       PROCESSOR_CPU_LOAD_INFO,
                                       &numCpus,
                                       &info,
                                       &numCpuInfo)
        
        guard result == KERN_SUCCESS else { return 0.0 }
        
        defer {
            vm_deallocate(mach_task_self_, vm_address_t(bitPattern: info), vm_size_t(numCpuInfo))
        }
        
        var totalUsage: Double = 0.0
        
        for i in 0..<Int(numCpus) {
            let cpu_info = info.advanced(by: i * Int(CPU_STATE_MAX)).assumingMemoryBound(to: integer_t.self)
            let user = Double(cpu_info[Int(CPU_STATE_USER)])
            let system = Double(cpu_info[Int(CPU_STATE_SYSTEM)])
            let nice = Double(cpu_info[Int(CPU_STATE_NICE)])
            let idle = Double(cpu_info[Int(CPU_STATE_IDLE)])
            let total = user + system + nice + idle
            
            if total > 0 {
                totalUsage += (user + system + nice) / total * 100.0
            }
        }
        
        return totalUsage / Double(numCpus)
    }
    
    private func getCurrentMemoryUsage() -> Double {
        var info = mach_task_basic_info()
        var count = mach_msg_type_number_t(MemoryLayout<mach_task_basic_info>.size) / 4
        
        let kerr: kern_return_t = withUnsafeMutablePointer(to: &info) {
            $0.withMemoryRebound(to: integer_t.self, capacity: 1) {
                task_info(mach_task_self_,
                         task_flavor_t(MACH_TASK_BASIC_INFO),
                         $0,
                         &count)
            }
        }
        
        if kerr == KERN_SUCCESS {
            return Double(info.resident_size) / 1024.0 / 1024.0
        }
        
        return 0.0
    }
    
    private func getCurrentThreadCount() -> Int {
        var threadList: thread_act_array_t?
        var threadCount: mach_msg_type_number_t = 0
        
        let result = task_threads(mach_task_self_, &threadList, &threadCount)
        
        if result == KERN_SUCCESS, let list = threadList {
            vm_deallocate(mach_task_self_, vm_address_t(bitPattern: list), vm_size_t(threadCount))
            return Int(threadCount)
        }
        
        return 0
    }
    
    private func performPostSessionAnalysis() {
        logger.info("üî¨ ÊâßË°å‰ºöËØùÂêéÂàÜÊûê")
        
        // Ê£ÄÊµãÁÉ≠ÁÇπ
        let detectedHotspots = detectPerformanceHotspots()
        
        DispatchQueue.main.async {
            self.hotspots = detectedHotspots
            
            // Êõ¥Êñ∞ÁªüËÆ°‰ø°ÊÅØ
            self.profilingStats = ProfilingStatistics(
                totalSessions: self.completedSessions.count,
                totalSamples: self.totalSamplesCollected,
                totalFunctionCalls: UInt64(self.functionCallSamples.count),
                totalMemoryAllocations: UInt64(self.memoryAllocationSamples.count),
                averageCPUUsage: self.calculateAverageCPUUsage(),
                averageMemoryUsage: self.calculateAverageMemoryUsage()
            )
        }
        
        logger.info("‚úÖ ‰ºöËØùÂêéÂàÜÊûêÂÆåÊàê")
    }
    
    private func detectPerformanceHotspots() -> [PerformanceHotspot] {
        var hotspots: [PerformanceHotspot] = []
        
        // ÂàÜÊûêÂáΩÊï∞Ë∞ÉÁî®ÁÉ≠ÁÇπ
        let functionStats = functionCallTracker.getStatistics()
        for (functionName, stats) in functionStats {
            let totalTime = stats.totalDuration
            let callCount = stats.callCount
            let avgTime = totalTime / Double(callCount)
            
            if totalTime > hotspotDetectionThreshold {
                let hotspot = PerformanceHotspot(
                    type: .function,
                    location: functionName,
                    impact: totalTime,
                    frequency: callCount,
                    averageTime: avgTime,
                    description: "ÂáΩÊï∞ \(functionName) Ê∂àËÄó‰∫Ü \(String(format: "%.2f", totalTime * 1000))ms"
                )
                hotspots.append(hotspot)
            }
        }
        
        // ÂàÜÊûêÂÜÖÂ≠òÂàÜÈÖçÁÉ≠ÁÇπ
        let memoryStats = memoryAllocationTracker.getStatistics()
        for (allocationType, stats) in memoryStats {
            if stats.totalSize > 1024 * 1024 { // 1MB threshold
                let hotspot = PerformanceHotspot(
                    type: .memory,
                    location: allocationType,
                    impact: Double(stats.totalSize),
                    frequency: stats.allocationCount,
                    averageTime: 0,
                    description: "ÂÜÖÂ≠òÂàÜÈÖçÁ±ªÂûã \(allocationType) ÂàÜÈÖç‰∫Ü \(stats.totalSize / 1024 / 1024)MB"
                )
                hotspots.append(hotspot)
            }
        }
        
        return hotspots.sorted { $0.impact > $1.impact }
    }
    
    private func analyzeFunctionHotspots() -> [FunctionHotspot] {
        let functionStats = functionCallTracker.getStatistics()
        
        return functionStats.map { (functionName, stats) in
            FunctionHotspot(
                functionName: functionName,
                totalTime: stats.totalDuration,
                callCount: stats.callCount,
                averageTime: stats.totalDuration / Double(stats.callCount),
                maxTime: stats.maxDuration,
                minTime: stats.minDuration
            )
        }.sorted { $0.totalTime > $1.totalTime }
    }
    
    private func analyzeMemoryAllocationPatterns() -> [MemoryAllocationPattern] {
        let memoryStats = memoryAllocationTracker.getStatistics()
        
        return memoryStats.map { (allocationType, stats) in
            MemoryAllocationPattern(
                type: allocationType,
                totalSize: stats.totalSize,
                allocationCount: stats.allocationCount,
                averageSize: stats.totalSize / stats.allocationCount,
                peakSize: stats.peakSize
            )
        }.sorted { $0.totalSize > $1.totalSize }
    }
    
    private func analyzeThreadExecution() -> ThreadExecutionAnalysis {
        // ÂàÜÊûêÁ∫øÁ®ãÊâßË°åÊ®°Âºè
        let threadStats = threadExecutionTracker.getStatistics()
        
        return ThreadExecutionAnalysis(
            totalThreads: threadStats.count,
            averageConcurrency: calculateAverageConcurrency(),
            threadUtilization: calculateThreadUtilization(),
            deadlockRisk: assessDeadlockRisk()
        )
    }
    
    private func generateOptimizationRecommendations(_ report: PerformanceAnalysisReport) -> [OptimizationRecommendation] {
        var recommendations: [OptimizationRecommendation] = []
        
        // Âü∫‰∫éÂáΩÊï∞ÁÉ≠ÁÇπÁöÑÂª∫ËÆÆ
        for hotspot in report.functionHotspots.prefix(3) {
            if hotspot.totalTime > 0.1 { // 100ms threshold
                recommendations.append(OptimizationRecommendation(
                    type: .performance,
                    priority: .high,
                    title: "‰ºòÂåñÁÉ≠ÁÇπÂáΩÊï∞",
                    description: "ÂáΩÊï∞ \(hotspot.functionName) Ê∂àËÄóÊó∂Èó¥ËøáÈïøÔºåÂª∫ËÆÆ‰ºòÂåñÁÆóÊ≥ïÊàñ‰ΩøÁî®ÁºìÂ≠ò",
                    expectedImprovement: "ÂèØÊèêÂçá \(String(format: "%.0f", hotspot.totalTime * 100))% ÊÄßËÉΩ"
                ))
            }
        }
        
        // Âü∫‰∫éÂÜÖÂ≠òÂàÜÈÖçÁöÑÂª∫ËÆÆ
        for pattern in report.memoryAllocationPatterns.prefix(2) {
            if pattern.totalSize > 10 * 1024 * 1024 { // 10MB threshold
                recommendations.append(OptimizationRecommendation(
                    type: .memory,
                    priority: .medium,
                    title: "‰ºòÂåñÂÜÖÂ≠ò‰ΩøÁî®",
                    description: "Á±ªÂûã \(pattern.type) ÂàÜÈÖçÂÜÖÂ≠òËøáÂ§öÔºåÂª∫ËÆÆ‰ΩøÁî®ÂØπË±°Ê±†ÊàñÂáèÂ∞ëÂàÜÈÖçÈ¢ëÁéá",
                    expectedImprovement: "ÂèØÂáèÂ∞ë \(pattern.totalSize / 1024 / 1024)MB ÂÜÖÂ≠ò‰ΩøÁî®"
                ))
            }
        }
        
        return recommendations
    }
    
    private func calculatePerformanceScore(_ report: PerformanceAnalysisReport) -> Double {
        var score: Double = 100.0
        
        // Âü∫‰∫éÂáΩÊï∞ÁÉ≠ÁÇπÊâ£ÂàÜ
        let totalFunctionTime = report.functionHotspots.reduce(0) { $0 + $1.totalTime }
        score -= min(totalFunctionTime * 100, 30) // ÊúÄÂ§öÊâ£30ÂàÜ
        
        // Âü∫‰∫éÂÜÖÂ≠ò‰ΩøÁî®Êâ£ÂàÜ
        let totalMemoryUsage = report.memoryAllocationPatterns.reduce(0) { $0 + $1.totalSize }
        let memoryScore = min(Double(totalMemoryUsage) / (100 * 1024 * 1024) * 20, 20) // ÊúÄÂ§öÊâ£20ÂàÜ
        score -= memoryScore
        
        // Âü∫‰∫éÁ∫øÁ®ã‰ΩøÁî®Êâ£ÂàÜ
        if report.threadExecutionAnalysis.deadlockRisk > 0.5 {
            score -= 10
        }
        
        return max(score, 0)
    }
    
    private func calculateAverageCPUUsage() -> Double {
        guard !profilingSamples.isEmpty else { return 0.0 }
        
        let totalCPU = profilingSamples.reduce(0.0) { $0 + $1.cpuUsage }
        return totalCPU / Double(profilingSamples.count)
    }
    
    private func calculateAverageMemoryUsage() -> Double {
        guard !profilingSamples.isEmpty else { return 0.0 }
        
        let totalMemory = profilingSamples.reduce(0.0) { $0 + $1.memoryUsage }
        return totalMemory / Double(profilingSamples.count)
    }
    
    private func calculateAverageConcurrency() -> Double {
        guard !profilingSamples.isEmpty else { return 0.0 }
        
        let totalThreads = profilingSamples.reduce(0.0) { $0 + Double($1.threadCount) }
        return totalThreads / Double(profilingSamples.count)
    }
    
    private func calculateThreadUtilization() -> Double {
        // ÁÆÄÂåñÁöÑÁ∫øÁ®ãÂà©Áî®ÁéáËÆ°ÁÆó
        return calculateAverageConcurrency() / Double(ProcessInfo.processInfo.processorCount)
    }
    
    private func assessDeadlockRisk() -> Double {
        // ÁÆÄÂåñÁöÑÊ≠ªÈîÅÈ£éÈô©ËØÑ‰º∞
        let concurrency = calculateAverageConcurrency()
        let utilization = calculateThreadUtilization()
        
        if concurrency > 10 && utilization > 0.8 {
            return 0.7
        } else if concurrency > 5 && utilization > 0.6 {
            return 0.4
        } else {
            return 0.1
        }
    }
    
    // MARK: - Export Methods
    
    private func exportAsJSON() -> Data? {
        let exportData = ProfilingExportData(
            sessions: completedSessions,
            samples: profilingSamples,
            functionCalls: functionCallSamples,
            memoryAllocations: memoryAllocationSamples,
            hotspots: hotspots
        )
        
        return try? JSONEncoder().encode(exportData)
    }
    
    private func exportAsCSV() -> Data? {
        var csvContent = "Timestamp,CPU Usage,Memory Usage,Thread Count\n"
        
        for sample in profilingSamples {
            csvContent += "\(sample.timestamp),\(sample.cpuUsage),\(sample.memoryUsage),\(sample.threadCount)\n"
        }
        
        return csvContent.data(using: .utf8)
    }
    
    private func exportForInstruments() -> Data? {
        // ÂØºÂá∫‰∏∫ Instruments ÂèØËØÜÂà´ÁöÑÊ†ºÂºè
        // ËøôÈáåÁÆÄÂåñÂÆûÁé∞ÔºåÂÆûÈôÖÂèØËÉΩÈúÄË¶ÅÊõ¥Â§çÊùÇÁöÑÊ†ºÂºèËΩ¨Êç¢
        return exportAsJSON()
    }
}

// MARK: - Supporting Types and Classes

/// ÂáΩÊï∞Ë∞ÉÁî®ËøΩË∏™Âô®
class FunctionCallTracker {
    private var functionStats: [String: FunctionCallStats] = [:]
    private let queue = DispatchQueue(label: "com.capswriter.function-tracker", attributes: .concurrent)
    
    func recordCall(_ sample: FunctionCallSample) {
        queue.async(flags: .barrier) {
            let key = "\(sample.className).\(sample.functionName)"
            
            if var stats = self.functionStats[key] {
                stats.callCount += 1
                stats.totalDuration += sample.duration
                stats.maxDuration = max(stats.maxDuration, sample.duration)
                stats.minDuration = min(stats.minDuration, sample.duration)
                self.functionStats[key] = stats
            } else {
                self.functionStats[key] = FunctionCallStats(
                    callCount: 1,
                    totalDuration: sample.duration,
                    maxDuration: sample.duration,
                    minDuration: sample.duration
                )
            }
        }
    }
    
    func getStatistics() -> [String: FunctionCallStats] {
        return queue.sync { functionStats }
    }
    
    func reset() {
        queue.async(flags: .barrier) {
            self.functionStats.removeAll()
        }
    }
}

/// ÂÜÖÂ≠òÂàÜÈÖçËøΩË∏™Âô®
class MemoryAllocationTracker {
    private var allocationStats: [String: MemoryAllocationStats] = [:]
    private let queue = DispatchQueue(label: "com.capswriter.memory-tracker", attributes: .concurrent)
    
    func recordAllocation(_ sample: MemoryAllocationSample) {
        queue.async(flags: .barrier) {
            if var stats = self.allocationStats[sample.type] {
                stats.allocationCount += 1
                stats.totalSize += sample.size
                stats.peakSize = max(stats.peakSize, sample.size)
                self.allocationStats[sample.type] = stats
            } else {
                self.allocationStats[sample.type] = MemoryAllocationStats(
                    allocationCount: 1,
                    totalSize: sample.size,
                    peakSize: sample.size
                )
            }
        }
    }
    
    func getStatistics() -> [String: MemoryAllocationStats] {
        return queue.sync { allocationStats }
    }
    
    func reset() {
        queue.async(flags: .barrier) {
            self.allocationStats.removeAll()
        }
    }
}

/// Á∫øÁ®ãÊâßË°åËøΩË∏™Âô®
class ThreadExecutionTracker {
    private var threadStats: [String: ThreadStats] = [:]
    private let queue = DispatchQueue(label: "com.capswriter.thread-tracker", attributes: .concurrent)
    
    func getStatistics() -> [String: ThreadStats] {
        return queue.sync { threadStats }
    }
    
    func reset() {
        queue.async(flags: .barrier) {
            self.threadStats.removeAll()
        }
    }
}

// MARK: - Data Models

/// ÊÄßËÉΩÂàÜÊûê‰ºöËØù
struct ProfilingSession: Identifiable, Codable {
    let id = UUID()
    let name: String
    let startTime: Date
    var endTime: Date?
    var sampleCount: Int = 0
    var functionCallCount: Int = 0
    var memoryAllocationCount: Int = 0
    
    var duration: TimeInterval? {
        guard let endTime = endTime else { return nil }
        return endTime.timeIntervalSince(startTime)
    }
}

/// ÊÄßËÉΩÈááÊ†∑Êï∞ÊçÆ
struct ProfilingSample: Codable {
    let timestamp: Date
    let cpuUsage: Double
    let memoryUsage: Double
    let threadCount: Int
}

/// ÂáΩÊï∞Ë∞ÉÁî®ÈááÊ†∑
struct FunctionCallSample: Codable {
    let functionName: String
    let className: String
    let startTime: Date
    let endTime: Date
    let duration: TimeInterval
    let threadId: String
}

/// ÂÜÖÂ≠òÂàÜÈÖçÈááÊ†∑
struct MemoryAllocationSample: Codable {
    let size: Int
    let type: String
    let location: String
    let timestamp: Date
    let threadId: String
}

/// ÊÄßËÉΩÁÉ≠ÁÇπ
struct PerformanceHotspot: Identifiable {
    let id = UUID()
    let type: HotspotType
    let location: String
    let impact: Double
    let frequency: Int
    let averageTime: Double
    let description: String
}

enum HotspotType {
    case function
    case memory
    case thread
}

/// ÂàÜÊûêÁªüËÆ°
struct ProfilingStatistics {
    var totalSessions: Int = 0
    var totalSamples: UInt64 = 0
    var totalFunctionCalls: UInt64 = 0
    var totalMemoryAllocations: UInt64 = 0
    var averageCPUUsage: Double = 0.0
    var averageMemoryUsage: Double = 0.0
}

/// ÂáΩÊï∞Ë∞ÉÁî®ÁªüËÆ°
struct FunctionCallStats {
    var callCount: Int
    var totalDuration: TimeInterval
    var maxDuration: TimeInterval
    var minDuration: TimeInterval
}

/// ÂÜÖÂ≠òÂàÜÈÖçÁªüËÆ°
struct MemoryAllocationStats {
    var allocationCount: Int
    var totalSize: Int
    var peakSize: Int
}

/// Á∫øÁ®ãÁªüËÆ°
struct ThreadStats {
    var executionTime: TimeInterval = 0
    var blockedTime: TimeInterval = 0
    var contextSwitches: Int = 0
}

/// ÊÄßËÉΩÂàÜÊûêÊä•Âëä
struct PerformanceAnalysisReport {
    var functionHotspots: [FunctionHotspot] = []
    var memoryAllocationPatterns: [MemoryAllocationPattern] = []
    var threadExecutionAnalysis: ThreadExecutionAnalysis = ThreadExecutionAnalysis()
    var optimizationRecommendations: [OptimizationRecommendation] = []
    var performanceScore: Double = 0.0
    var generatedAt: Date = Date()
}

/// ÂáΩÊï∞ÁÉ≠ÁÇπ
struct FunctionHotspot {
    let functionName: String
    let totalTime: TimeInterval
    let callCount: Int
    let averageTime: TimeInterval
    let maxTime: TimeInterval
    let minTime: TimeInterval
}

/// ÂÜÖÂ≠òÂàÜÈÖçÊ®°Âºè
struct MemoryAllocationPattern {
    let type: String
    let totalSize: Int
    let allocationCount: Int
    let averageSize: Int
    let peakSize: Int
}

/// Á∫øÁ®ãÊâßË°åÂàÜÊûê
struct ThreadExecutionAnalysis {
    var totalThreads: Int = 0
    var averageConcurrency: Double = 0.0
    var threadUtilization: Double = 0.0
    var deadlockRisk: Double = 0.0
}

/// ‰ºòÂåñÂª∫ËÆÆ
struct OptimizationRecommendation {
    let type: RecommendationType
    let priority: RecommendationPriority
    let title: String
    let description: String
    let expectedImprovement: String
}

enum RecommendationType {
    case performance
    case memory
    case thread
    case architecture
}

enum RecommendationPriority {
    case high
    case medium
    case low
}

/// ÂØºÂá∫Êï∞ÊçÆÊ†ºÂºè
enum ProfilingDataFormat {
    case json
    case csv
    case instruments
}

/// ÂØºÂá∫Êï∞ÊçÆÁªìÊûÑ
struct ProfilingExportData: Codable {
    let sessions: [ProfilingSession]
    let samples: [ProfilingSample]
    let functionCalls: [FunctionCallSample]
    let memoryAllocations: [MemoryAllocationSample]
    let hotspots: [PerformanceHotspot]
}

// MARK: - Convenience Extensions

extension PerformanceHotspot: Codable {
    enum CodingKeys: String, CodingKey {
        case type, location, impact, frequency, averageTime, description
    }
    
    func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(String(describing: type), forKey: .type)
        try container.encode(location, forKey: .location)
        try container.encode(impact, forKey: .impact)
        try container.encode(frequency, forKey: .frequency)
        try container.encode(averageTime, forKey: .averageTime)
        try container.encode(description, forKey: .description)
    }
    
    init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        let typeString = try container.decode(String.self, forKey: .type)
        
        switch typeString {
        case "function": type = .function
        case "memory": type = .memory
        case "thread": type = .thread
        default: type = .function
        }
        
        location = try container.decode(String.self, forKey: .location)
        impact = try container.decode(Double.self, forKey: .impact)
        frequency = try container.decode(Int.self, forKey: .frequency)
        averageTime = try container.decode(Double.self, forKey: .averageTime)
        description = try container.decode(String.self, forKey: .description)
    }
}